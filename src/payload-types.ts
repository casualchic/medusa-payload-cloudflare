/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    products: Product;
    'product-variants': ProductVariant;
    'product-options': ProductOption;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    'product-variants': ProductVariantsSelect<false> | ProductVariantsSelect<true>;
    'product-options': ProductOptionsSelect<false> | ProductOptionsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  /**
   * Product ID from Medusa
   */
  medusaId: string;
  /**
   * Product title from Medusa
   */
  title: string;
  /**
   * URL-friendly product identifier
   */
  handle: string;
  /**
   * Product description - you can enhance this with rich content
   */
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Product status from Medusa
   */
  status: 'draft' | 'proposed' | 'published' | 'rejected';
  /**
   * Main product image URL
   */
  thumbnail?: string | null;
  /**
   * Additional product metadata from Medusa
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Override SEO title (optional)
   */
  seoTitle?: string | null;
  /**
   * Override SEO description (optional)
   */
  seoDescription?: string | null;
  /**
   * Additional editorial content (styling guides, care instructions, etc.)
   */
  additionalContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-variants".
 */
export interface ProductVariant {
  id: number;
  /**
   * Variant ID from Medusa
   */
  medusaId: string;
  /**
   * Parent product
   */
  product: number | Product;
  /**
   * Variant title (e.g., "Small / Black")
   */
  title: string;
  /**
   * Stock keeping unit
   */
  sku?: string | null;
  /**
   * Product barcode
   */
  barcode?: string | null;
  /**
   * Price data from Medusa
   */
  prices?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Selected options (e.g., {Size: "M", Color: "Navy"})
   */
  options?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  inventory?: {
    manage_inventory?: boolean | null;
    allow_backorder?: boolean | null;
  };
  /**
   * Additional variant metadata
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-options".
 */
export interface ProductOption {
  id: number;
  /**
   * Option ID from Medusa
   */
  medusaId: string;
  /**
   * Parent product
   */
  product: number | Product;
  /**
   * Option name (e.g., "Size", "Color")
   */
  title: string;
  /**
   * Available option values
   */
  values: {
    value: string;
    /**
     * Option value ID from Medusa
     */
    medusaValueId?: string | null;
    id?: string | null;
  }[];
  /**
   * Additional option metadata
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * Page title (used in browser tab and navigation)
   */
  title: string;
  /**
   * URL-friendly identifier (auto-generated from title if empty)
   */
  slug: string;
  /**
   * Page publication status
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * Publication date (optional, defaults to first publish)
   */
  publishedAt?: string | null;
  /**
   * Build your page with flexible content blocks
   */
  content: (
    | HeroBlock
    | FeaturedProductsBlock
    | TextBlock
    | ImageGalleryBlock
    | CTABlock
    | VideoBlock
    | TestimonialsBlock
  )[];
  seo?: {
    /**
     * Override default page title for search engines (50-60 chars)
     */
    title?: string | null;
    /**
     * Meta description for search results (150-160 chars)
     */
    description?: string | null;
    /**
     * Comma-separated keywords (optional, mainly for internal use)
     */
    keywords?: string | null;
    /**
     * Social sharing image (recommended: 1200x630px)
     */
    image?: (number | null) | Media;
    /**
     * Prevent search engines from indexing this page
     */
    noIndex?: boolean | null;
    /**
     * Canonical URL (leave empty to use default)
     */
    canonical?: string | null;
  };
  /**
   * Add custom CSS for this page (advanced users only)
   */
  customCSS?: string | null;
  /**
   * Add custom JavaScript for this page (advanced users only)
   */
  customJS?: string | null;
  /**
   * Page layout variant
   */
  layout?: ('default' | 'wide' | 'narrow' | 'fullwidth') | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock".
 */
export interface HeroBlock {
  /**
   * Main heading text
   */
  heading: string;
  /**
   * Subheading or tagline
   */
  subheading?: string | null;
  /**
   * Hero background image (recommended: 1920x1080px)
   */
  backgroundImage: number | Media;
  /**
   * Dark overlay opacity (0-100%)
   */
  overlayOpacity?: number | null;
  textAlign?: ('left' | 'center' | 'right') | null;
  height?: ('small' | 'medium' | 'large' | 'fullscreen') | null;
  cta?: {
    /**
     * Call-to-action button text
     */
    text?: string | null;
    /**
     * Button destination URL
     */
    link?: string | null;
    style?: ('primary' | 'secondary' | 'outline') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturedProductsBlock".
 */
export interface FeaturedProductsBlock {
  /**
   * Section heading (e.g., "New Arrivals", "Best Sellers")
   */
  heading?: string | null;
  /**
   * Optional section description
   */
  description?: string | null;
  /**
   * How to select products to display
   */
  displayMode: 'manual' | 'latest' | 'random';
  /**
   * Select specific products to feature
   */
  products?: (number | Product)[] | null;
  /**
   * Number of products to display (1-12)
   */
  limit?: number | null;
  layout?: ('grid' | 'carousel') | null;
  columns?: ('2' | '3' | '4') | null;
  /**
   * Display product prices
   */
  showPrice?: boolean | null;
  /**
   * Enable quick view button on hover
   */
  showQuickView?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featuredProducts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock".
 */
export interface TextBlock {
  /**
   * Rich text content with formatting options
   */
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Content container width
   */
  width?: ('narrow' | 'normal' | 'wide' | 'full') | null;
  textAlign?: ('left' | 'center' | 'right') | null;
  /**
   * Section background color
   */
  backgroundColor?: ('transparent' | 'white' | 'gray-50' | 'brand-primary' | 'brand-secondary') | null;
  /**
   * Vertical padding
   */
  padding?: ('none' | 'small' | 'normal' | 'large') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGalleryBlock".
 */
export interface ImageGalleryBlock {
  /**
   * Optional gallery heading
   */
  heading?: string | null;
  /**
   * Add up to 12 images
   */
  images: {
    image: number | Media;
    /**
     * Optional image caption
     */
    caption?: string | null;
    id?: string | null;
  }[];
  layout: 'grid' | 'masonry' | 'carousel';
  columns?: ('2' | '3' | '4') | null;
  /**
   * Image aspect ratio for grid layout
   */
  aspectRatio?: ('square' | 'landscape' | 'portrait' | 'wide' | 'original') | null;
  /**
   * Allow clicking images to view full-size in lightbox
   */
  enableLightbox?: boolean | null;
  /**
   * Spacing between images
   */
  gap?: ('none' | 'small' | 'normal' | 'large') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageGallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTABlock".
 */
export interface CTABlock {
  /**
   * Main CTA heading
   */
  heading: string;
  /**
   * Supporting text or description
   */
  description?: string | null;
  /**
   * Add up to 3 buttons
   */
  buttons: {
    text: string;
    /**
     * Button destination URL
     */
    link: string;
    style?: ('primary' | 'secondary' | 'outline' | 'ghost') | null;
    openInNewTab?: boolean | null;
    id?: string | null;
  }[];
  layout?: ('centered' | 'left' | 'right' | 'split') | null;
  /**
   * Optional background image
   */
  backgroundImage?: (number | null) | Media;
  /**
   * Background color (when no image is set)
   */
  backgroundColor?: ('transparent' | 'white' | 'gray-50' | 'dark' | 'brand-primary' | 'brand-secondary') | null;
  /**
   * Background image overlay opacity (0-100%)
   */
  overlayOpacity?: number | null;
  /**
   * Vertical padding
   */
  padding?: ('small' | 'normal' | 'large' | 'xlarge') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock".
 */
export interface VideoBlock {
  /**
   * Video source type
   */
  videoType: 'youtube' | 'vimeo' | 'direct';
  /**
   * YouTube or Vimeo video ID
   */
  videoId?: string | null;
  /**
   * Direct video URL (MP4, WebM, etc.)
   */
  videoUrl?: string | null;
  /**
   * Optional poster/thumbnail image
   */
  posterImage?: (number | null) | Media;
  aspectRatio?: ('16:9' | '4:3' | '1:1' | '9:16') | null;
  /**
   * Optional video caption
   */
  caption?: string | null;
  /**
   * Autoplay video (muted)
   */
  autoplay?: boolean | null;
  /**
   * Loop video playback
   */
  loop?: boolean | null;
  /**
   * Show video controls
   */
  controls?: boolean | null;
  /**
   * Video container width
   */
  width?: ('narrow' | 'normal' | 'wide' | 'full') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'video';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock".
 */
export interface TestimonialsBlock {
  /**
   * Section heading (e.g., "What Our Customers Say")
   */
  heading?: string | null;
  /**
   * Add customer testimonials
   */
  testimonials: {
    /**
     * Customer testimonial text
     */
    quote: string;
    /**
     * Customer name
     */
    customerName: string;
    /**
     * Customer title or location (optional)
     */
    customerTitle?: string | null;
    /**
     * Customer photo (optional)
     */
    customerImage?: (number | null) | Media;
    /**
     * Star rating (1-5, optional)
     */
    rating?: number | null;
    id?: string | null;
  }[];
  layout?: ('grid' | 'carousel' | 'single') | null;
  columns?: ('1' | '2' | '3') | null;
  /**
   * Display customer images
   */
  showImages?: boolean | null;
  /**
   * Display star ratings
   */
  showRatings?: boolean | null;
  /**
   * Section background color
   */
  backgroundColor?: ('transparent' | 'white' | 'gray-50' | 'brand-primary') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonials';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'products';
        value: number | Product;
      } | null)
    | ({
        relationTo: 'product-variants';
        value: number | ProductVariant;
      } | null)
    | ({
        relationTo: 'product-options';
        value: number | ProductOption;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  medusaId?: T;
  title?: T;
  handle?: T;
  description?: T;
  status?: T;
  thumbnail?: T;
  metadata?: T;
  seoTitle?: T;
  seoDescription?: T;
  additionalContent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-variants_select".
 */
export interface ProductVariantsSelect<T extends boolean = true> {
  medusaId?: T;
  product?: T;
  title?: T;
  sku?: T;
  barcode?: T;
  prices?: T;
  options?: T;
  inventory?:
    | T
    | {
        manage_inventory?: T;
        allow_backorder?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-options_select".
 */
export interface ProductOptionsSelect<T extends boolean = true> {
  medusaId?: T;
  product?: T;
  title?: T;
  values?:
    | T
    | {
        value?: T;
        medusaValueId?: T;
        id?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  status?: T;
  publishedAt?: T;
  content?:
    | T
    | {
        hero?: T | HeroBlockSelect<T>;
        featuredProducts?: T | FeaturedProductsBlockSelect<T>;
        text?: T | TextBlockSelect<T>;
        imageGallery?: T | ImageGalleryBlockSelect<T>;
        cta?: T | CTABlockSelect<T>;
        video?: T | VideoBlockSelect<T>;
        testimonials?: T | TestimonialsBlockSelect<T>;
      };
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
        image?: T;
        noIndex?: T;
        canonical?: T;
      };
  customCSS?: T;
  customJS?: T;
  layout?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroBlock_select".
 */
export interface HeroBlockSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  backgroundImage?: T;
  overlayOpacity?: T;
  textAlign?: T;
  height?: T;
  cta?:
    | T
    | {
        text?: T;
        link?: T;
        style?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturedProductsBlock_select".
 */
export interface FeaturedProductsBlockSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  displayMode?: T;
  products?: T;
  limit?: T;
  layout?: T;
  columns?: T;
  showPrice?: T;
  showQuickView?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock_select".
 */
export interface TextBlockSelect<T extends boolean = true> {
  content?: T;
  width?: T;
  textAlign?: T;
  backgroundColor?: T;
  padding?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageGalleryBlock_select".
 */
export interface ImageGalleryBlockSelect<T extends boolean = true> {
  heading?: T;
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  layout?: T;
  columns?: T;
  aspectRatio?: T;
  enableLightbox?: T;
  gap?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTABlock_select".
 */
export interface CTABlockSelect<T extends boolean = true> {
  heading?: T;
  description?: T;
  buttons?:
    | T
    | {
        text?: T;
        link?: T;
        style?: T;
        openInNewTab?: T;
        id?: T;
      };
  layout?: T;
  backgroundImage?: T;
  backgroundColor?: T;
  overlayOpacity?: T;
  padding?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock_select".
 */
export interface VideoBlockSelect<T extends boolean = true> {
  videoType?: T;
  videoId?: T;
  videoUrl?: T;
  posterImage?: T;
  aspectRatio?: T;
  caption?: T;
  autoplay?: T;
  loop?: T;
  controls?: T;
  width?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock_select".
 */
export interface TestimonialsBlockSelect<T extends boolean = true> {
  heading?: T;
  testimonials?:
    | T
    | {
        quote?: T;
        customerName?: T;
        customerTitle?: T;
        customerImage?: T;
        rating?: T;
        id?: T;
      };
  layout?: T;
  columns?: T;
  showImages?: T;
  showRatings?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}